import { GridColDef } from "@mui/x-data-grid";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

interface GridColumn {
  [index: string]: (fieldName?: string) => GridColDef;
}
dayjs.extend(utc);

export const getGenericGridColumns = (
  t: (key: string) => string
): GridColumn => {
  return {
    fileNumber: (fieldName = "fileNumber") => ({
      field: fieldName,
      headerName: t("Tables.Headers.FileNumber"),
      flex: 0.75,
      type: "number",
      headerAlign: "left",
      align: "left",
      minWidth: 170,
    }),
    fName: (fieldName = "fName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Name"),
      flex: 1,
      sortable: false,
      minWidth: 200,
      renderCell: (params) =>
        `${params.row.fName} ${params.row.mName} ${params.row.lName}`,
    }),
    mName: (fieldName = "mName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.FatherName"),
      disableExport: true,
      flex: 0.75,
      minWidth: 150,
      sortable: false,
    }),
    lName: (fieldName = "lName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.FamilyName"),
      disableExport: true,
      flex: 0.75,
      minWidth: 150,
      sortable: false,
    }),
    phone1: (fieldName = "phone1") => ({
      field: fieldName,
      sortable: false,
      minWidth: 150,
      headerName: t("Tables.Headers.FirstPhone"),
      flex: 1,
    }),
    phone2: (fieldName = "phone2") => ({
      field: fieldName,
      headerName: t("Tables.Headers.SecondPhone"),
      sortable: false,
      minWidth: 150,
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1,
    }),
    idNum: (fieldName = "idNum") => ({
      field: fieldName,
      headerName: t("Tables.Headers.IDNumber"),
      type: "number",
      headerAlign: "left",
      align: "left",
      sortable: false,
      minWidth: 150,
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1,
    }),
    address: (fieldName = "address") => ({
      field: fieldName,
      sortable: false,
      minWidth: 250,
      headerName: t("Tables.Headers.Address"),
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1.2,
    }),
    email: (fieldName = "email") => ({
      field: fieldName,
      sortable: false,
      minWidth: 250,
      headerName: t("Tables.Headers.Email"),
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1.4,
    }),
    date: (fieldName = "createdAt") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Date"),
      flex: 1,
      type: "date",
      valueFormatter: (_, row) =>
        dayjs.utc(row[fieldName]).format("YYYY-MM-DD"),
      minWidth: 150,
    }),
    time: (fieldName = "createdAt") => ({
      field: "time",
      headerName: t("Tables.Headers.Time"),
      flex: 1,
      filterable: false,
      sortable: false,
      valueFormatter: (_, row) => dayjs.utc(row[fieldName]).format("HH:mm"),
      minWidth: 100,
    }),
    treatment: (fieldName = "treatment") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Treatment"),
      flex: 1,
      sortable: false,
      minWidth: 200,
    }),
    employeeName: (fieldName = "employeeName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Treater"),
      flex: 1,
      sortable: false,
      minWidth: 200,
    }),
    cost: (fieldName = "cost") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Cost"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 1,
      minWidth: 150,
    }),
    payment: (fieldName = "payment") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Payment"),
      type: "number",
      headerAlign: "left",
      align: "left",
      minWidth: 140,
      flex: 1,
    }),
    notes: (fieldName = "notes") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Notes"),
      sortable: false,
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1,
      minWidth: 250,
    }),
    name: (fieldName = "name") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Name"),
      flex: 1,
      sortable: false,
      minWidth: 200,
    }),
    salePrice: (fieldName = "salePrice") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Price"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 1,
      minWidth: 150,
    }),
    actions: (fieldName = "actions") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Actions"),
      disableExport: true,
      sortable: false,
      flex: 0.5,
      minWidth: 180,
    }),
    fullName: (fieldName = "fullName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Name"),
      flex: 1,
      sortable: false,
      minWidth: 200,
    }),
    amount: (fieldName = "amount") => ({
      field: fieldName,
      headerName: t("Tables.Headers.Amount"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 1,
      minWidth: 150,
    }),
    totalVisits: (fieldName = "totalVisits") => ({
      field: fieldName,
      headerName: t("Tables.Headers.NumberOfTreatments"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 0.5,
      minWidth: 180,
    }),
    totalDebts: (fieldName = "totalDebts") => ({
      field: fieldName,
      headerName: t("Tables.Headers.TotalDebts"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 0.5,
      minWidth: 180,
    }),
    customerName: (fieldName = "customerName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.CustomerName"),
      flex: 1,
      sortable: false,
      minWidth: 200,
    }),
    productName: (fieldName = "productName") => ({
      field: fieldName,
      headerName: t("Tables.Headers.ProductName"),
      sortable: false,
      flex: 1,
      minWidth: 200,
    }),
    saleBonus: (fieldName = "saleBonus") => ({
      field: fieldName,
      headerName: t("Tables.Headers.bonus"),
      type: "number",
      headerAlign: "left",
      align: "left",
      flex: 1,
      minWidth: 150,
    }),
    machine: (fieldName = "machine") => ({
      field: fieldName,
      headerName: t("Tables.Headers.machine"),
      sortable: false,
      renderCell: (params) => `${params.value || t("Tables.noResults")}`,
      flex: 1,
      minWidth: 120,
    }),
  };
};
